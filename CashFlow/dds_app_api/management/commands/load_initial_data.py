from django.core.management.base import BaseCommand
from dds_app_api.models import Status, TransactionType, Category, Subcategory, Transaction
from django.utils import timezone
from decimal import Decimal
import random
from datetime import datetime, timedelta

class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É –î–î–°'
    
    def handle(self, *args, **options):
        self.stdout.write('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.clean_database()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        self.create_statuses()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        self.create_transaction_types()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.create_categories_and_subcategories()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self.create_sample_transactions()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!'))
    
    def clean_database(self):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        Transaction.objects.all().delete()
        Subcategory.objects.all().delete()
        Category.objects.all().delete()
        TransactionType.objects.all().delete()
        Status.objects.all().delete()
        self.stdout.write('üóëÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')
    
    def create_statuses(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        statuses = [
            {'name': '–ë–∏–∑–Ω–µ—Å', 'description': '–ë–∏–∑–Ω–µ—Å –æ–ø–µ—Ä–∞—Ü–∏–∏'},
            {'name': '–õ–∏—á–Ω–æ–µ', 'description': '–õ–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'},
            {'name': '–ù–∞–ª–æ–≥', 'description': '–ù–∞–ª–æ–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'},
            {'name': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'description': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'},
            {'name': '–ü—Ä–æ—á–µ–µ', 'description': '–ü—Ä–æ—á–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'},
        ]
        
        for status_data in statuses:
            status, created = Status.objects.get_or_create(
                name=status_data['name'],
                defaults=status_data
            )
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: {status.name}')
    
    def create_transaction_types(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        transaction_types = [
            {'name': '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', 'description': '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤'},
            {'name': '–°–ø–∏—Å–∞–Ω–∏–µ', 'description': '–†–∞—Å—Ö–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'},
        ]
        
        for type_data in transaction_types:
            transaction_type, created = TransactionType.objects.get_or_create(
                name=type_data['name'],
                defaults=type_data
            )
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction_type.name}')
    
    def create_categories_and_subcategories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        income_type = TransactionType.objects.get(name='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        expense_type = TransactionType.objects.get(name='–°–ø–∏—Å–∞–Ω–∏–µ')
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
        income_categories = [
            {
                'name': '–ü—Ä–æ–¥–∞–∂–∏',
                'description': '–î–æ—Ö–æ–¥—ã –æ—Ç –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥',
                'subcategories': [
                    {'name': '–û–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂–∏', 'description': '–ü—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω'},
                    {'name': '–û—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂–∏', 'description': '–ü—Ä–æ–¥–∞–∂–∏ –≤ —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö'},
                    {'name': '–û–ø—Ç–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏', 'description': '–û–ø—Ç–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏'},
                    {'name': '–£—Å–ª—É–≥–∏', 'description': '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥'},
                ]
            },
            {
                'name': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
                'description': '–î–æ—Ö–æ–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                'subcategories': [
                    {'name': '–î–∏–≤–∏–¥–µ–Ω–¥—ã', 'description': '–î–∏–≤–∏–¥–µ–Ω–¥—ã –ø–æ –∞–∫—Ü–∏—è–º'},
                    {'name': '–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º', 'description': '–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –≤–∫–ª–∞–¥–∞–º'},
                    {'name': '–†–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤', 'description': '–ü—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–æ–≤'},
                    {'name': '–ö—É–ø–æ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã', 'description': '–í—ã–ø–ª–∞—Ç—ã –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º'},
                ]
            },
            {
                'name': '–§—Ä–∏–ª–∞–Ω—Å',
                'description': '–î–æ—Ö–æ–¥—ã –æ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã',
                'subcategories': [
                    {'name': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'description': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è'},
                    {'name': '–î–∏–∑–∞–π–Ω', 'description': '–î–∏–∑–∞–π–Ω –∏ –≥—Ä–∞—Ñ–∏–∫–∞'},
                    {'name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', 'description': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏'},
                    {'name': '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥', 'description': '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤'},
                ]
            },
            {
                'name': '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥',
                'description': '–ü–∞—Å—Å–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞',
                'subcategories': [
                    {'name': '–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', 'description': '–î–æ—Ö–æ–¥ –æ—Ç —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É'},
                    {'name': '–†–æ—è–ª—Ç–∏', 'description': '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è'},
                    {'name': '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', 'description': '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥'},
                ]
            },
        ]
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        expense_categories = [
            {
                'name': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                'description': '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º—É',
                'subcategories': [
                    {'name': '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞', 'description': '–†–µ–∫–ª–∞–º–∞ –≤ Google Ads, Yandex Direct'},
                    {'name': 'SEO', 'description': '–ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'},
                    {'name': 'SMM', 'description': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞'},
                    {'name': 'Email —Ä–∞—Å—Å—ã–ª–∫–∏', 'description': 'Email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥'},
                    {'name': '–í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'description': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'},
                ]
            },
            {
                'name': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
                'description': '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ IT –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É',
                'subcategories': [
                    {'name': 'VPS/–•–æ—Å—Ç–∏–Ω–≥', 'description': '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ —Ö–æ—Å—Ç–∏–Ω–≥'},
                    {'name': '–î–æ–º–µ–Ω—ã', 'description': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω'},
                    {'name': 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', 'description': 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã'},
                    {'name': 'CDN', 'description': 'Content Delivery Network'},
                    {'name': '–°–æ—Ñ—Ç –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏', 'description': '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ'},
                ]
            },
            {
                'name': '–ó–∞—Ä–ø–ª–∞—Ç—ã',
                'description': '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç—Ä—É–¥–∞',
                'subcategories': [
                    {'name': '–®—Ç–∞—Ç–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'description': '–û–∫–ª–∞–¥–Ω–∞—è —á–∞—Å—Ç—å'},
                    {'name': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã', 'description': '–í–Ω–µ—à—Ç–∞—Ç–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'},
                    {'name': '–ü—Ä–µ–º–∏–∏', 'description': '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã'},
                    {'name': '–ù–∞–ª–æ–≥–∏ –Ω–∞ –§–û–¢', 'description': '–ù–∞–ª–æ–≥–∏ –Ω–∞ —Ñ–æ–Ω–¥ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞'},
                ]
            },
            {
                'name': '–û—Ñ–∏—Å',
                'description': '–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                'subcategories': [
                    {'name': '–ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è', 'description': '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞'},
                    {'name': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', 'description': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≤–æ–¥–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç'},
                    {'name': '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', 'description': '–û—Ñ–∏—Å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏'},
                    {'name': '–ú–µ–±–µ–ª—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'description': '–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∞'},
                ]
            },
            {
                'name': '–ù–∞–ª–æ–≥–∏',
                'description': '–ù–∞–ª–æ–≥–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
                'subcategories': [
                    {'name': '–ù–î–°', 'description': '–ù–∞–ª–æ–≥ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å'},
                    {'name': '–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å', 'description': '–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'},
                    {'name': '–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã', 'description': '–í–∑–Ω–æ—Å—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã'},
                    {'name': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –Ω–∞–ª–æ–≥', 'description': '–ù–∞–ª–æ–≥ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'},
                ]
            },
            {
                'name': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏',
                'description': '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏',
                'subcategories': [
                    {'name': '–ü—Ä–æ–µ–∑–¥', 'description': '–ê–≤–∏–∞ –∏ –∂/–¥ –±–∏–ª–µ—Ç—ã'},
                    {'name': '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', 'description': '–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã –∏ –æ—Ç–µ–ª–∏'},
                    {'name': '–°—É—Ç–æ—á–Ω—ã–µ', 'description': '–°—É—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'},
                    {'name': '–¢–∞–∫—Å–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'description': '–ú–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'},
                ]
            },
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        for category_data in income_categories:
            category, created = Category.objects.get_or_create(
                name=category_data['name'],
                transaction_type=income_type,
                defaults={'description': category_data['description']}
            )
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}')
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for subcat_data in category_data['subcategories']:
                subcategory, created = Subcategory.objects.get_or_create(
                    name=subcat_data['name'],
                    category=category,
                    defaults={'description': subcat_data['description']}
                )
                if created:
                    self.stdout.write(f'  ‚Üí –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.name}')
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        for category_data in expense_categories:
            category, created = Category.objects.get_or_create(
                name=category_data['name'],
                transaction_type=expense_type,
                defaults={'description': category_data['description']}
            )
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}')
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for subcat_data in category_data['subcategories']:
                subcategory, created = Subcategory.objects.get_or_create(
                    name=subcat_data['name'],
                    category=category,
                    defaults={'description': subcat_data['description']}
                )
                if created:
                    self.stdout.write(f'  ‚Üí –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.name}')
    
    def create_sample_transactions(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.stdout.write('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
        business_status = Status.objects.get(name='–ë–∏–∑–Ω–µ—Å')
        personal_status = Status.objects.get(name='–õ–∏—á–Ω–æ–µ')
        tax_status = Status.objects.get(name='–ù–∞–ª–æ–≥')
        
        income_type = TransactionType.objects.get(name='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        expense_type = TransactionType.objects.get(name='–°–ø–∏—Å–∞–Ω–∏–µ')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        income_subcategories = list(Subcategory.objects.filter(category__transaction_type=income_type))
        expense_subcategories = list(Subcategory.objects.filter(category__transaction_type=expense_type))
        
        # –°–æ–∑–¥–∞–µ–º 40+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        transactions_data = []
        
        # –î–æ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (20 —à—Ç—É–∫)
        for i in range(20):
            date = timezone.now() - timedelta(days=random.randint(1, 180))
            subcategory = random.choice(income_subcategories)
            
            transactions_data.append({
                'transaction_date': date.date(),
                'status': business_status,
                'transaction_type': income_type,
                'category': subcategory.category,
                'subcategory': subcategory,
                'amount': Decimal(str(round(random.uniform(1000, 50000), 2))),
                'comment': f'{subcategory.name} - {date.strftime("%B %Y")}'
            })
        
        # –†–∞—Å—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (20 —à—Ç—É–∫) - —Å—É–º–º—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ!
        for i in range(20):
            date = timezone.now() - timedelta(days=random.randint(1, 180))
            subcategory = random.choice(expense_subcategories)
            
            amount = Decimal(str(round(random.uniform(500, 20000), 2)))
            
            transactions_data.append({
                'transaction_date': date.date(),
                'status': business_status if random.random() > 0.3 else personal_status,
                'transaction_type': expense_type,  # –¢–∏–ø "–°–ø–∏—Å–∞–Ω–∏–µ" –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥
                'category': subcategory.category,
                'subcategory': subcategory,
                'amount': amount,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞!
                'comment': f'{subcategory.name} - {date.strftime("%B %Y")}'
            })
        
        # –ù–∞–ª–æ–≥–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (5 —à—Ç—É–∫) - —Å—É–º–º—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ!
        tax_categories = Category.objects.filter(name='–ù–∞–ª–æ–≥–∏')
        if tax_categories.exists():
            tax_subcategories = Subcategory.objects.filter(category=tax_categories.first())
            for i in range(5):
                date = timezone.now() - timedelta(days=random.randint(30, 180))
                subcategory = random.choice(list(tax_subcategories))
                
                transactions_data.append({
                    'transaction_date': date.date(),
                    'status': tax_status,
                    'transaction_type': expense_type,  # –¢–∏–ø "–°–ø–∏—Å–∞–Ω–∏–µ"
                    'category': subcategory.category,
                    'subcategory': subcategory,
                    'amount': Decimal(str(round(random.uniform(5000, 30000), 2))),  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞!
                    'comment': f'–ù–∞–ª–æ–≥–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ - {subcategory.name}'
                })
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        created_count = 0
        for transaction_data in transactions_data:
            transaction, created = Transaction.objects.get_or_create(
                transaction_date=transaction_data['transaction_date'],
                amount=transaction_data['amount'],
                subcategory=transaction_data['subcategory'],
                defaults=transaction_data
            )
            if created:
                created_count += 1
        
        self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        specific_transactions = [
            {
                'transaction_date': '2024-01-15',
                'status': business_status,
                'transaction_type': income_type,
                'category': Category.objects.get(name='–ü—Ä–æ–¥–∞–∂–∏'),
                'subcategory': Subcategory.objects.get(name='–û–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂–∏'),
                'amount': Decimal('50000.00'),
                'comment': '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω'
            },
            {
                'transaction_date': '2024-01-16',
                'status': business_status,
                'transaction_type': expense_type,  # –¢–∏–ø "–°–ø–∏—Å–∞–Ω–∏–µ"
                'category': Category.objects.get(name='–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'),
                'subcategory': Subcategory.objects.get(name='–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞'),
                'amount': Decimal('15000.00'),  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞!
                'comment': '–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –≤ Google Ads'
            },
            {
                'transaction_date': '2024-01-17',
                'status': business_status,
                'transaction_type': expense_type,  # –¢–∏–ø "–°–ø–∏—Å–∞–Ω–∏–µ"
                'category': Category.objects.get(name='–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'),
                'subcategory': Subcategory.objects.get(name='VPS/–•–æ—Å—Ç–∏–Ω–≥'),
                'amount': Decimal('5000.00'),  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞!
                'comment': '–û–ø–ª–∞—Ç–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞'
            },
        ]
        
        for transaction_data in specific_transactions:
            transaction, created = Transaction.objects.get_or_create(
                transaction_date=transaction_data['transaction_date'],
                amount=transaction_data['amount'],
                subcategory=transaction_data['subcategory'],
                defaults=transaction_data
            )
            if created:
                self.stdout.write(f'‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ–º–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction.amount}—Ä. - {transaction.subcategory.name}')